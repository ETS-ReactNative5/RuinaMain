/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View } from 'react-native';
import { styled, } from '../../theme';
import { SelectOption, } from './selectOption.component';
class SelectGroupOptionComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { itemPaddingHorizontal, ...containerParameters } = source;
            return {
                container: containerParameters,
                item: {
                    paddingHorizontal: itemPaddingHorizontal,
                },
            };
        };
        this.getGroupOptionMainItemProps = (children) => {
            const selectedItems = children.map(element => element.props.selected);
            const someSelected = selectedItems.some((item) => item === true);
            const everySelected = selectedItems.every((item) => item === true);
            if (someSelected && !everySelected) {
                return { selected: true, indeterminate: true };
            }
            if (!someSelected) {
                return { selected: false, indeterminate: false };
            }
            if (everySelected) {
                return { selected: true, indeterminate: false };
            }
        };
        this.renderGroupOptionElement = (option, index) => {
            return (React.createElement(SelectOption, { key: index, multi: this.props.multi, item: option, selected: this.props.isOptionSelected(option), onSelect: this.props.onSelect }));
        };
        this.renderGroupOptionElements = (componentStyle) => {
            return this.props.item.items.map((option, index) => {
                const optionElement = this.renderGroupOptionElement(option, index);
                return React.cloneElement(optionElement, {
                    style: [optionElement.props.style, componentStyle.item],
                });
            });
        };
        this.renderSingleElement = () => {
            return (React.createElement(SelectOption, { key: 0, multi: this.props.multi, item: this.props.item, selected: false, onSelect: this.props.onSelect, disabled: true }));
        };
        this.renderGroupElement = (children) => {
            return (React.createElement(SelectOption, Object.assign({}, this.getGroupOptionMainItemProps(children), { key: 0, multi: this.props.multi, item: this.props.item, onSelect: this.props.onSelect })));
        };
        this.renderComponentChildren = (componentStyle) => {
            const groupOptions = this.renderGroupOptionElements(componentStyle);
            return [
                this.props.multi ? this.renderGroupElement(groupOptions) : this.renderSingleElement(),
                groupOptions,
            ];
        };
    }
    render() {
        const { container, ...componentStyle } = this.getComponentStyle(this.props.themedStyle);
        const [mainElement, groupOptionElements] = this.renderComponentChildren(componentStyle);
        return (React.createElement(View, { style: container },
            mainElement,
            groupOptionElements));
    }
}
SelectGroupOptionComponent.styledComponentName = 'SelectGroupOption';
export const SelectGroupOption = styled(SelectGroupOptionComponent);
//# sourceMappingURL=selectGroupOption.component.js.map