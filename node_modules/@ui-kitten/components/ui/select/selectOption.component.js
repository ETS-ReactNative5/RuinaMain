/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { Platform, StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { CheckBox } from '../checkbox/checkbox.component';
import { WebEventResponder, } from '../support/services';
class SelectOptionComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = WebEventResponder.create(this);
        // WebEventResponderCallbacks
        this.onMouseEnter = () => {
            this.props.dispatch([Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onPress = (event) => {
            if (this.props.onSelect) {
                this.props.onSelect(this.props.item);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
        };
        this.onMultiSelectItemPress = (value) => {
            this.onPress(null);
        };
        this.getComponentStyle = (source) => {
            const { textColor, textFontFamily, textFontSize, textFontWeight, textLineHeight, textMarginHorizontal, ...containerParameters } = source;
            return {
                container: containerParameters,
                text: {
                    color: textColor,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    fontWeight: textFontWeight,
                    lineHeight: textLineHeight,
                    marginHorizontal: textMarginHorizontal,
                },
            };
        };
        this.renderTextElement = (style) => {
            return (React.createElement(Text, { style: [style, styles.text, this.props.item.textStyle] }, this.props.item.text));
        };
        this.renderSingleElement = () => {
            const { themedStyle, style, item, ...restProps } = this.props;
            const { container, text } = this.getComponentStyle(themedStyle);
            const textElement = this.renderTextElement(text);
            return (React.createElement(TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, restProps, this.webEventResponder.eventHandlers, { style: [styles.container, container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }), textElement));
        };
        this.renderMultiSelectElement = () => {
            const { style, themedStyle, selected, disabled, indeterminate, item, ...restProps } = this.props;
            const { container, text } = this.getComponentStyle(themedStyle);
            return (React.createElement(View, Object.assign({}, restProps, this.webEventResponder.eventHandlers, { style: [styles.container, container, webStyles.container, style] }),
                React.createElement(CheckBox, { text: item.text, textStyle: [text, item.textStyle, styles.multiSelectText], disabled: disabled, checked: selected, indeterminate: indeterminate, onChange: this.onMultiSelectItemPress })));
        };
    }
    render() {
        return this.props.multi ? this.renderMultiSelectElement() : this.renderSingleElement();
    }
}
SelectOptionComponent.styledComponentName = 'SelectOption';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    icon: {},
    text: {},
    multiSelectText: {
        width: '100%',
    },
});
const webStyles = Platform.OS === 'web' && StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
export const SelectOption = styled(SelectOptionComponent);
//# sourceMappingURL=selectOption.component.js.map