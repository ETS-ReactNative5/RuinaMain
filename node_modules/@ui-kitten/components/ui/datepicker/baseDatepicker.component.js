import React from 'react';
import { StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, } from '../../theme';
import { Text, } from '../text/text.component';
import { Popover } from '../popover/popover.component';
import { NativeDateService } from '../calendar/service/nativeDate.service';
import { isValidString } from '../support/services';
import { PopoverPlacements, } from '../popover/type';
export class BaseDatepickerComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            visible: false,
        };
        this.popoverRef = React.createRef();
        this.show = () => {
            this.popoverRef.current.show();
        };
        this.hide = () => {
            this.popoverRef.current.hide();
        };
        this.focus = () => {
            this.setState({ visible: true }, this.dispatchActive);
        };
        this.blur = () => {
            this.setState({ visible: true }, this.dispatchActive);
        };
        this.isFocused = () => {
            return this.state.visible;
        };
        this.getComponentStyle = (style) => {
            const { textMarginHorizontal, textFontFamily, textFontSize, textLineHeight, textFontWeight, textColor, placeholderColor, iconWidth, iconHeight, iconMarginHorizontal, iconTintColor, labelColor, labelFontSize, labelLineHeight, labelMarginBottom, labelFontWeight, captionMarginTop, captionColor, captionFontSize, captionLineHeight, captionFontWeight, captionIconWidth, captionIconHeight, captionIconMarginRight, captionIconTintColor, popoverWidth, ...controlParameters } = style;
            return {
                control: controlParameters,
                captionContainer: {
                    marginTop: captionMarginTop,
                },
                text: {
                    marginHorizontal: textMarginHorizontal,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    fontWeight: textFontWeight,
                    lineHeight: textLineHeight,
                    color: textColor,
                },
                placeholder: {
                    marginHorizontal: textMarginHorizontal,
                    color: placeholderColor,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginHorizontal: iconMarginHorizontal,
                    tintColor: iconTintColor,
                },
                label: {
                    color: labelColor,
                    fontSize: labelFontSize,
                    lineHeight: labelLineHeight,
                    marginBottom: labelMarginBottom,
                    fontWeight: labelFontWeight,
                },
                captionIcon: {
                    width: captionIconWidth,
                    height: captionIconHeight,
                    tintColor: captionIconTintColor,
                    marginRight: captionIconMarginRight,
                },
                captionLabel: {
                    fontSize: captionFontSize,
                    fontWeight: captionFontWeight,
                    lineHeight: captionLineHeight,
                    color: captionColor,
                },
                popover: {
                    width: popoverWidth,
                    marginBottom: captionMarginTop,
                },
            };
        };
        this.onPress = (event) => {
            this.toggleVisibility();
            if (this.props.onPress) {
                this.props.onPress(event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.toggleVisibility = () => {
            const visible = !this.state.visible;
            this.setState({ visible }, this.dispatchActive);
        };
        this.dispatchActive = () => {
            if (this.state.visible) {
                this.props.dispatch([Interaction.ACTIVE]);
            }
            else {
                this.props.dispatch([]);
            }
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return React.cloneElement(iconElement, {
                style: [style, iconElement.props.style],
            });
        };
        this.renderLabelElement = (style) => {
            return (React.createElement(Text, { key: 1, style: [style, styles.label, this.props.labelStyle] }, this.props.label));
        };
        this.renderCaptionElement = (style) => {
            return (React.createElement(Text, { key: 2, style: [style, styles.captionLabel, this.props.captionStyle] }, this.props.caption));
        };
        this.renderCaptionIconElement = (style) => {
            const iconElement = this.props.captionIcon(style);
            return React.cloneElement(iconElement, {
                key: 3,
                style: [style, iconElement.props.style],
            });
        };
        this.renderTextElement = (style) => {
            return (React.createElement(Text, { style: style, numberOfLines: 1, ellipsizeMode: 'tail' }, this.getComponentTitle()));
        };
        this.renderControlChildren = (style) => {
            return [
                this.props.icon && this.renderIconElement(style.icon),
                this.renderTextElement(style.text),
            ];
        };
        this.renderControlElement = (style) => {
            const { themedStyle, controlStyle, ...restProps } = this.props;
            const [iconElement, textElement] = this.renderControlChildren(style);
            return (React.createElement(TouchableOpacity, Object.assign({}, restProps, { activeOpacity: 1.0, style: [styles.control, style.control, controlStyle], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }),
                textElement,
                iconElement));
        };
        this.renderComponentChildren = (style) => {
            return [
                this.renderCalendar(),
                isValidString(this.props.label) && this.renderLabelElement(style.label),
                this.renderControlElement(style),
                isValidString(this.props.caption) && this.renderCaptionElement(style.captionLabel),
                this.props.captionIcon && this.renderCaptionIconElement(style.captionIcon),
            ];
        };
    }
    render() {
        const { themedStyle, style, placement } = this.props;
        const { popover, ...componentStyle } = this.getComponentStyle(themedStyle);
        const [calendarElement, labelElement, controlElement, captionElement, captionIconElement,] = this.renderComponentChildren(componentStyle);
        return (React.createElement(View, { style: style },
            labelElement,
            React.createElement(Popover, { ref: this.popoverRef, style: [popover, styles.popover], placement: placement, visible: this.state.visible, content: calendarElement, onBackdropPress: this.toggleVisibility }, controlElement),
            React.createElement(View, { style: [componentStyle.captionContainer, styles.captionContainer] },
                captionIconElement,
                captionElement)));
    }
}
BaseDatepickerComponent.defaultProps = {
    dateService: new NativeDateService(),
    placeholder: 'dd/mm/yyyy',
    placement: PopoverPlacements.BOTTOM_START,
};
const styles = StyleSheet.create({
    popover: {
        borderWidth: 0,
    },
    control: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    label: {
        textAlign: 'left',
    },
    captionContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    captionLabel: {
        textAlign: 'left',
    },
});
//# sourceMappingURL=baseDatepicker.component.js.map