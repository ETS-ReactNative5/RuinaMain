/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { ModalService, } from '../../theme';
import { MeasureElement, } from '../measure/measure.component';
import { Frame, Point, } from '../measure/type';
const POINT_OUTSCREEN = new Point(-999, -999);
/**
 * `Modal` component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets modal visible.
 *
 * @method {() => void} hide - Sets modal invisible.
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {ReactElement | ReactElement[]} children - Determines component's children.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example ModalSimpleUsage
 *
 * @overview-example ModalWithBackdrop
 */
export class Modal extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            contentFrame: Frame.zero(),
            forceMeasure: false,
        };
        this.contentPosition = POINT_OUTSCREEN;
        this.show = () => {
            this.modalId = ModalService.show(this.renderMeasuringContentElement(), this.backdropConfig);
        };
        this.hide = () => {
            this.modalId = ModalService.hide(this.modalId);
        };
        this.onContentMeasure = (contentFrame) => {
            this.state.contentFrame = contentFrame;
            const displayFrame = this.state.contentFrame.centerOf(Frame.window());
            this.contentPosition = displayFrame.origin;
            ModalService.update(this.modalId, this.renderContentElement());
        };
        this.renderContentElement = () => {
            return (React.createElement(View, Object.assign({}, this.props, { style: [this.props.style, styles.modalView, this.contentFlexPosition] })));
        };
        this.renderMeasuringContentElement = () => {
            return (React.createElement(MeasureElement, { onMeasure: this.onContentMeasure }, this.renderContentElement()));
        };
    }
    get contentFlexPosition() {
        const derivedStyle = StyleSheet.flatten(this.props.style || {});
        const { x: centerX, y: centerY } = this.contentPosition;
        // @ts-ignore
        return { left: derivedStyle.left || centerX, top: derivedStyle.top || centerY };
    }
    get backdropConfig() {
        const { onBackdropPress, backdropStyle } = this.props;
        return { onBackdropPress, backdropStyle };
    }
    componentDidUpdate(prevProps) {
        if (!this.modalId && this.props.visible && !this.state.forceMeasure) {
            this.setState({ forceMeasure: true });
            return;
        }
        if (this.modalId && !this.props.visible) {
            // this.contentPosition = POINT_OUTSCREEN;
            this.hide();
        }
    }
    componentWillUnmount() {
        this.hide();
    }
    render() {
        if (!this.modalId && this.props.visible) {
            this.show();
            return null;
        }
        if (this.modalId && this.props.visible) {
            ModalService.update(this.modalId, this.renderContentElement());
            return null;
        }
        return null;
    }
}
const styles = StyleSheet.create({
    modalView: {
        position: 'absolute',
    },
});
//# sourceMappingURL=modal.component.js.map